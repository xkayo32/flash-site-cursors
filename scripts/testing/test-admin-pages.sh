#!/bin/bash

# Script de teste para p√°ginas admin
# Testa funcionalidades e integra√ß√£o com APIs

echo "=== üéØ TESTE DE P√ÅGINAS ADMIN ==="
echo ""

# Configura√ß√µes
API_URL="http://173.208.151.106:8180/api/v1"
FRONTEND_URL="http://173.208.151.106:5273"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Login e obter token
echo "üîê Fazendo login como admin..."
LOGIN_RESPONSE=$(curl -s -X POST "$API_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@studypro.com","password":"Admin@123"}')

TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*' | sed 's/"token":"//')

if [ -z "$TOKEN" ]; then
    echo -e "${RED}‚ùå Erro ao fazer login${NC}"
    echo "Response: $LOGIN_RESPONSE"
    exit 1
fi

echo -e "${GREEN}‚úÖ Login realizado com sucesso${NC}"
echo ""

# Fun√ß√£o para testar endpoint
test_endpoint() {
    local METHOD=$1
    local ENDPOINT=$2
    local DESCRIPTION=$3
    local DATA=$4
    
    echo "üì° Testando: $DESCRIPTION"
    echo "   Endpoint: $METHOD $ENDPOINT"
    
    if [ "$METHOD" = "GET" ]; then
        RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "$API_URL$ENDPOINT" \
          -H "Authorization: Bearer $TOKEN")
    else
        RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X $METHOD "$API_URL$ENDPOINT" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json" \
          -d "$DATA")
    fi
    
    HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
    BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS:/d')
    
    if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ]; then
        echo -e "   ${GREEN}‚úÖ Status: $HTTP_STATUS${NC}"
        
        # Verificar se tem dados
        if echo "$BODY" | grep -q '"data":\[\]' || echo "$BODY" | grep -q '"data":null'; then
            echo -e "   ${YELLOW}‚ö†Ô∏è  Sem dados retornados${NC}"
        else
            echo -e "   ${GREEN}‚úÖ Dados recebidos${NC}"
        fi
    else
        echo -e "   ${RED}‚ùå Status: $HTTP_STATUS${NC}"
        echo "   Response: $(echo $BODY | head -c 200)"
    fi
    
    echo ""
    return $HTTP_STATUS
}

# ==========================================
# TESTES POR P√ÅGINA
# ==========================================

echo "=== üìä 1. DASHBOARD ==="
test_endpoint "GET" "/dashboard/stats" "Estat√≠sticas do Dashboard"
test_endpoint "GET" "/dashboard/activities" "Atividades Recentes"
test_endpoint "GET" "/dashboard/performance" "M√©tricas de Performance"

echo "=== üë• 2. USU√ÅRIOS ==="
test_endpoint "GET" "/users" "Listar Usu√°rios"
test_endpoint "GET" "/users?page=1&limit=10" "Listar Usu√°rios com Pagina√ß√£o"

echo "=== üìö 3. CURSOS ==="
test_endpoint "GET" "/courses" "Listar Cursos"
test_endpoint "GET" "/courses?status=published" "Cursos Publicados"

echo "=== üè∑Ô∏è 4. CATEGORIAS ==="
test_endpoint "GET" "/categories" "Listar Categorias"

echo "=== ‚ùì 5. QUEST√ïES ==="
test_endpoint "GET" "/questions" "Listar Quest√µes"
test_endpoint "GET" "/questions?page=1&limit=10" "Quest√µes com Pagina√ß√£o"

echo "=== üé¥ 6. FLASHCARDS ==="
test_endpoint "GET" "/flashcards" "Listar Flashcards"
test_endpoint "GET" "/flashcard-decks" "Listar Arsenais"

echo "=== üìù 7. SIMULADOS ==="
test_endpoint "GET" "/mockexams" "Listar Simulados"
test_endpoint "GET" "/mockexams/available" "Simulados Dispon√≠veis"

echo "=== üìã 8. PROVAS ANTERIORES ==="
test_endpoint "GET" "/previousexams" "Listar Provas Anteriores"

echo "=== üìñ 9. RESUMOS ==="
test_endpoint "GET" "/summaries" "Listar Resumos"

echo "=== ‚öñÔ∏è 10. LEGISLA√á√ÉO ==="
test_endpoint "GET" "/legislation" "Listar Legisla√ß√µes"
test_endpoint "GET" "/legislation/types" "Tipos de Legisla√ß√£o"

echo "=== ‚öôÔ∏è 11. CONFIGURA√á√ïES ==="
test_endpoint "GET" "/settings" "Configura√ß√µes do Sistema"
test_endpoint "GET" "/settings/user" "Configura√ß√µes do Usu√°rio"

echo "=== üìä 12. ANALYTICS ==="
test_endpoint "GET" "/analytics" "Analytics Geral"

echo "=== üí¨ 13. COMENT√ÅRIOS ==="
test_endpoint "GET" "/comments" "Listar Coment√°rios"

echo "=== üìÖ 14. AGENDA ==="
test_endpoint "GET" "/schedule/tasks" "Tarefas Agendadas"
test_endpoint "GET" "/schedule/events" "Eventos"

echo ""
echo "=== üìà RESUMO DOS TESTES ==="
echo ""
echo "‚úÖ Testes conclu√≠dos!"
echo ""
echo "Recomenda√ß√µes:"
echo "1. Verificar endpoints que retornaram erro ou sem dados"
echo "2. Popular banco de dados com dados de teste se necess√°rio"
echo "3. Implementar endpoints faltantes no backend"
echo "4. Substituir dados hardcoded nas p√°ginas do frontend"