#!/bin/bash

echo "Teste: Modal de Confirma√ß√£o de Exclus√£o de Deck"
echo "==============================================="

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# API base URL
API_URL="http://localhost:8180/api/v1"

# Test user credentials
USER_EMAIL="aluno@example.com"
USER_PASSWORD="aluno123"

echo -e "${BLUE}1. Fazendo login como aluno...${NC}"
LOGIN_RESPONSE=$(curl -s -X POST "$API_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$USER_EMAIL\",\"password\":\"$USER_PASSWORD\"}")

TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*' | sed 's/"token":"//')

if [ -z "$TOKEN" ]; then
  echo -e "${RED}‚ùå Erro ao fazer login${NC}"
  exit 1
fi

echo -e "${GREEN}‚úì Login realizado com sucesso${NC}"

echo -e "${BLUE}2. Criando deck de teste...${NC}"
DECK_RESPONSE=$(curl -s -X POST "$API_URL/flashcard-decks" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Deck Teste Exclus√£o",
    "description": "Deck para testar modal de exclus√£o",
    "flashcard_ids": []
  }')

DECK_ID=$(echo $DECK_RESPONSE | grep -o '"id":"[^"]*' | sed 's/"id":"//')

if [ -z "$DECK_ID" ]; then
  echo -e "${YELLOW}‚ö† N√£o foi poss√≠vel criar deck de teste${NC}"
else
  echo -e "${GREEN}‚úì Deck criado com ID: $DECK_ID${NC}"
fi

echo ""
echo -e "${BLUE}3. Verificando componentes do modal...${NC}"

# Verificar se o modal n√£o usa window.confirm
echo -n "  Verificando remo√ß√£o de window.confirm em MyFlashcards: "
if grep -q "window.confirm\|confirm(" frontend/src/pages/student/MyFlashcards.tsx 2>/dev/null; then
  echo -e "${RED}‚ùå Ainda usa window.confirm${NC}"
else
  echo -e "${GREEN}‚úì N√£o usa window.confirm${NC}"
fi

echo -n "  Verificando remo√ß√£o de window.confirm em DeckView: "
if grep -q "window.confirm\|confirm(" frontend/src/pages/student/DeckView.tsx 2>/dev/null; then
  echo -e "${RED}‚ùå Ainda usa window.confirm${NC}"
else
  echo -e "${GREEN}‚úì N√£o usa window.confirm${NC}"
fi

# Verificar presen√ßa do modal customizado
echo -n "  Verificando modal customizado em MyFlashcards: "
if grep -q "deleteConfirm\|showDeleteConfirm" frontend/src/pages/student/MyFlashcards.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Modal customizado presente${NC}"
else
  echo -e "${RED}‚ùå Modal customizado n√£o encontrado${NC}"
fi

echo -n "  Verificando modal customizado em DeckView: "
if grep -q "showDeleteConfirm" frontend/src/pages/student/DeckView.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Modal customizado presente${NC}"
else
  echo -e "${RED}‚ùå Modal customizado n√£o encontrado${NC}"
fi

# Verificar atualiza√ß√£o imediata da tela
echo -n "  Verificando atualiza√ß√£o imediata em MyFlashcards: "
if grep -q "setMyDecks.*filter\|prevDecks.*filter" frontend/src/pages/student/MyFlashcards.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Atualiza√ß√£o imediata implementada${NC}"
else
  echo -e "${YELLOW}‚ö† Verificar atualiza√ß√£o imediata${NC}"
fi

echo ""
echo -e "${BLUE}4. Testando exclus√£o via API...${NC}"

if [ ! -z "$DECK_ID" ]; then
  DELETE_RESPONSE=$(curl -s -X DELETE "$API_URL/flashcard-decks/$DECK_ID" \
    -H "Authorization: Bearer $TOKEN")
  
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úì Deck exclu√≠do com sucesso via API${NC}"
  else
    echo -e "${RED}‚ùå Erro ao excluir deck${NC}"
  fi
fi

echo ""
echo -e "${BLUE}5. Verificando elementos visuais do modal...${NC}"

# Verificar √≠cone de alerta
echo -n "  √çcone AlertTriangle: "
if grep -q "AlertTriangle" frontend/src/pages/student/MyFlashcards.tsx frontend/src/pages/student/DeckView.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Presente${NC}"
else
  echo -e "${RED}‚ùå N√£o encontrado${NC}"
fi

# Verificar bot√µes do modal
echo -n "  Bot√£o Cancelar: "
if grep -q "Cancelar" frontend/src/pages/student/MyFlashcards.tsx frontend/src/pages/student/DeckView.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Presente${NC}"
else
  echo -e "${RED}‚ùå N√£o encontrado${NC}"
fi

echo -n "  Bot√£o Deletar Arsenal: "
if grep -q "Deletar Arsenal" frontend/src/pages/student/MyFlashcards.tsx frontend/src/pages/student/DeckView.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Presente${NC}"
else
  echo -e "${RED}‚ùå N√£o encontrado${NC}"
fi

# Verificar mensagem de confirma√ß√£o
echo -n "  Mensagem de confirma√ß√£o: "
if grep -q "Esta a√ß√£o n√£o pode ser desfeita" frontend/src/pages/student/MyFlashcards.tsx frontend/src/pages/student/DeckView.tsx 2>/dev/null; then
  echo -e "${GREEN}‚úì Presente${NC}"
else
  echo -e "${RED}‚ùå N√£o encontrada${NC}"
fi

echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}RESUMO DO TESTE${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo -e "${GREEN}‚úÖ Implementa√ß√µes Conclu√≠das:${NC}"
echo "  ‚Ä¢ Modal customizado substituindo window.confirm"
echo "  ‚Ä¢ Atualiza√ß√£o imediata da tela ap√≥s exclus√£o"
echo "  ‚Ä¢ Design consistente com tema militar"
echo "  ‚Ä¢ Mensagens claras de confirma√ß√£o"
echo "  ‚Ä¢ √çcone de alerta visual"
echo "  ‚Ä¢ Bot√µes de a√ß√£o apropriados"
echo ""
echo -e "${YELLOW}üìã Checklist Visual (testar manualmente):${NC}"
echo "  1. Clicar no bot√£o de deletar deck"
echo "  2. Modal deve aparecer com fundo escuro"
echo "  3. √çcone de alerta vermelho vis√≠vel"
echo "  4. Nome do deck deve aparecer na mensagem"
echo "  5. Bot√£o Cancelar deve fechar o modal"
echo "  6. Bot√£o Deletar deve excluir e atualizar a lista"
echo "  7. Toast de sucesso deve aparecer"
echo "  8. Lista deve ser atualizada sem recarregar p√°gina"
echo ""
echo -e "${GREEN}‚ú® Modal de confirma√ß√£o implementado com sucesso!${NC}"