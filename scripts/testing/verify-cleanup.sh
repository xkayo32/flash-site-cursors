#!/bin/bash

echo "üîç VERIFICA√á√ÉO DA LIMPEZA - DECKS E FLASHCARDS"
echo "=============================================="
echo ""

# URLs para verifica√ß√£o
ADMIN_URL="http://173.208.151.106:5273/admin/flashcards"
CARDS_URL="http://173.208.151.106:5273/admin/flashcards/cards"
STUDENT_URL="http://173.208.151.106:5273/my-flashcards"

echo "üåê TESTANDO ACESSO √ÄS P√ÅGINAS:"
echo ""

# Testar p√°gina admin de flashcards
echo "üìã Testando p√°gina admin de decks..."
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$ADMIN_URL")
if [ "$RESPONSE" = "200" ]; then
    echo "‚úÖ Admin Decks: OK (HTTP $RESPONSE)"
else
    echo "‚ùå Admin Decks: ERRO (HTTP $RESPONSE)"
fi

# Testar p√°gina admin de flashcards individuais
echo "üìã Testando p√°gina admin de flashcards..."
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$CARDS_URL")
if [ "$RESPONSE" = "200" ]; then
    echo "‚úÖ Admin Cards: OK (HTTP $RESPONSE)"
else
    echo "‚ùå Admin Cards: ERRO (HTTP $RESPONSE)"
fi

# Testar p√°gina do estudante
echo "üìã Testando p√°gina do estudante..."
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$STUDENT_URL")
if [ "$RESPONSE" = "200" ]; then
    echo "‚úÖ Student Cards: OK (HTTP $RESPONSE)"
else
    echo "‚ùå Student Cards: ERRO (HTTP $RESPONSE)"
fi

echo ""

# Verificar arquivos de dados
echo "üìä VERIFICANDO ARQUIVOS DE DADOS:"
echo ""

FLASHCARDS_FILE="/home/administrator/flash-site-cursors/backend-node/data/flashcards.json"
FLASHCARD_DECKS_FILE="/home/administrator/flash-site-cursors/backend-node/data/flashcard-decks.json"

if [ -f "$FLASHCARDS_FILE" ]; then
    FLASHCARDS_COUNT=$(jq 'length' "$FLASHCARDS_FILE" 2>/dev/null || echo "erro")
    echo "üìö Flashcards: $FLASHCARDS_COUNT"
else
    echo "‚ùå Arquivo flashcards.json n√£o encontrado"
fi

if [ -f "$FLASHCARD_DECKS_FILE" ]; then
    DECKS_COUNT=$(jq 'length' "$FLASHCARD_DECKS_FILE" 2>/dev/null || echo "erro")
    echo "üì¶ Decks: $DECKS_COUNT"
else
    echo "‚ùå Arquivo flashcard-decks.json n√£o encontrado"
fi

echo ""

# Status do backend
echo "üîß VERIFICANDO BACKEND:"
echo ""

HEALTH_RESPONSE=$(curl -s "http://localhost:8180/api/v1/health" 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Backend: Funcionando"
    echo "üì° Status: $(echo "$HEALTH_RESPONSE" | jq -r '.status' 2>/dev/null || echo 'ok')"
else
    echo "‚ùå Backend: Indispon√≠vel"
fi

echo ""
echo "üéØ INSTRU√á√ïES PARA VERIFICA√á√ÉO MANUAL:"
echo "======================================"
echo ""
echo "1. üîê FA√áA LOGIN COMO ADMIN:"
echo "   URL: http://173.208.151.106:5273/login"
echo "   Email: admin@studypro.com"
echo "   Senha: Admin@123"
echo ""
echo "2. üìã VERIFIQUE P√ÅGINAS VAZIAS:"
echo "   ‚Ä¢ Decks: $ADMIN_URL"
echo "   ‚Ä¢ Cards: $CARDS_URL"
echo ""
echo "3. üë§ TESTE COMO ESTUDANTE:"
echo "   Email: aluno@example.com"
echo "   Senha: aluno123"
echo "   URL: $STUDENT_URL"
echo ""
echo "4. ‚úÖ RESULTADO ESPERADO:"
echo "   ‚Ä¢ Todas as p√°ginas devem estar vazias (0 itens)"
echo "   ‚Ä¢ Mensagens como \"Nenhum flashcard encontrado\""
echo "   ‚Ä¢ Bot√µes de cria√ß√£o dispon√≠veis"
echo ""

if [ "$FLASHCARDS_COUNT" = "0" ] && [ "$DECKS_COUNT" = "0" ]; then
    echo "üéâ LIMPEZA CONFIRMADA - SISTEMA EST√Å VAZIO!"
else
    echo "‚ö†Ô∏è  ATEN√á√ÉO - AINDA H√Å DADOS NO SISTEMA"
fi