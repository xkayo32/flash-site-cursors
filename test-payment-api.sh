#!/bin/bash

# Test Payment API Endpoints
# Sistema de Pagamentos - Teste Completo da API

set -e  # Exit on any error

API_BASE="http://localhost:8180/api/v1"
ADMIN_EMAIL="admin@studypro.com"
ADMIN_PASSWORD="Admin@123"
STUDENT_EMAIL="aluno@example.com"
STUDENT_PASSWORD="aluno123"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}üî• TESTE COMPLETO - SISTEMA PAGAMENTOS${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

# Function to make requests with error handling
make_request() {
    local method=$1
    local url=$2
    local data=$3
    local token=$4
    local description=$5

    echo -e "${YELLOW}üì° ${description}${NC}"
    echo -e "   ${method} ${url}"

    if [ -n "$token" ]; then
        if [ -n "$data" ]; then
            response=$(curl -s -X "$method" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $token" \
                -d "$data" \
                "$API_BASE$url")
        else
            response=$(curl -s -X "$method" \
                -H "Authorization: Bearer $token" \
                "$API_BASE$url")
        fi
    else
        if [ -n "$data" ]; then
            response=$(curl -s -X "$method" \
                -H "Content-Type: application/json" \
                -d "$data" \
                "$API_BASE$url")
        else
            response=$(curl -s -X "$method" "$API_BASE$url")
        fi
    fi

    echo "$response"
    
    # Check if response contains success: true
    if echo "$response" | grep -q '"success":\s*true'; then
        echo -e "${GREEN}‚úÖ SUCESSO${NC}"
    else
        echo -e "${RED}‚ùå FALHA${NC}"
        if echo "$response" | grep -q '"message"'; then
            message=$(echo "$response" | grep -o '"message":"[^"]*"' | cut -d'"' -f4)
            echo -e "${RED}   Erro: $message${NC}"
        fi
    fi
    echo ""
    return 0
}

echo -e "${BLUE}üîê Fase 1: Autentica√ß√£o${NC}"
echo "----------------------------------------"

# 1. Login Admin
echo -e "${YELLOW}üßë‚Äçüíº Login Admin${NC}"
admin_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" \
    "$API_BASE/auth/login")

if echo "$admin_response" | grep -q '"success":\s*true'; then
    ADMIN_TOKEN=$(echo "$admin_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo -e "${GREEN}‚úÖ Admin autenticado com sucesso${NC}"
    echo -e "   Token: ${ADMIN_TOKEN:0:50}..."
else
    echo -e "${RED}‚ùå Falha na autentica√ß√£o admin${NC}"
    exit 1
fi
echo ""

# 2. Login Student (Aluno)
echo -e "${YELLOW}üéì Login Estudante${NC}"
student_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"$STUDENT_EMAIL\",\"password\":\"$STUDENT_PASSWORD\"}" \
    "$API_BASE/auth/login")

if echo "$student_response" | grep -q '"success":\s*true'; then
    STUDENT_TOKEN=$(echo "$student_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo -e "${GREEN}‚úÖ Estudante autenticado com sucesso${NC}"
    echo -e "   Token: ${STUDENT_TOKEN:0:50}..."
else
    echo -e "${RED}‚ùå Falha na autentica√ß√£o estudante${NC}"
    exit 1
fi
echo ""

echo -e "${BLUE}üí≥ Fase 2: M√©todos de Pagamento${NC}"
echo "----------------------------------------"

# 3. Listar m√©todos de pagamento (vazio inicialmente)
make_request "GET" "/payment/methods" "" "$STUDENT_TOKEN" "Listar arsenal financeiro inicial"

# 4. Adicionar m√©todo de pagamento
payment_method_data='{
    "brand": "visa",
    "last4": "4242",
    "expiry_month": 12,
    "expiry_year": 2026,
    "holder_name": "Jo√£o Silva",
    "nickname": "CART√ÉO PRINCIPAL T√ÅTICO",
    "is_default": true
}'
make_request "POST" "/payment/methods" "$payment_method_data" "$STUDENT_TOKEN" "Adicionar armamento ao arsenal"

# 5. Adicionar segundo m√©todo de pagamento
payment_method_data2='{
    "brand": "mastercard",
    "last4": "5555",
    "expiry_month": 8,
    "expiry_year": 2027,
    "holder_name": "Jo√£o Silva",
    "nickname": "CART√ÉO DE RESERVA T√ÅTICA",
    "is_default": false
}'
make_request "POST" "/payment/methods" "$payment_method_data2" "$STUDENT_TOKEN" "Adicionar segundo armamento"

# 6. Listar m√©todos de pagamento novamente
make_request "GET" "/payment/methods" "" "$STUDENT_TOKEN" "Listar arsenal atualizado"

# Pegar ID do primeiro m√©todo para testes
methods_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/methods")
if echo "$methods_response" | grep -q '"id"'; then
    PAYMENT_METHOD_ID=$(echo "$methods_response" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
    echo -e "${BLUE}üìù ID do m√©todo capturado: $PAYMENT_METHOD_ID${NC}"
    echo ""
fi

# 7. Atualizar m√©todo de pagamento
if [ -n "$PAYMENT_METHOD_ID" ]; then
    update_data='{"nickname": "ARMAMENTO PRINCIPAL ATUALIZADO"}'
    make_request "PUT" "/payment/methods/$PAYMENT_METHOD_ID" "$update_data" "$STUDENT_TOKEN" "Atualizar designa√ß√£o t√°tica"
fi

echo -e "${BLUE}üè† Fase 3: Endere√ßo de Cobran√ßa${NC}"
echo "----------------------------------------"

# 8. Buscar endere√ßo de cobran√ßa (vazio inicialmente)
make_request "GET" "/payment/billing" "" "$STUDENT_TOKEN" "Verificar base de opera√ß√µes inicial"

# 9. Configurar endere√ßo de cobran√ßa
billing_data='{
    "name": "Jo√£o Silva",
    "email": "joao@teste.com",
    "line1": "Rua Teste, 123",
    "line2": "Apt 45",
    "city": "S√£o Paulo",
    "state": "SP",
    "postal_code": "01234-567",
    "country": "BR"
}'
make_request "PUT" "/payment/billing" "$billing_data" "$STUDENT_TOKEN" "Configurar base de opera√ß√µes"

# 10. Buscar endere√ßo atualizado
make_request "GET" "/payment/billing" "" "$STUDENT_TOKEN" "Verificar base configurada"

echo -e "${BLUE}üìä Fase 4: Hist√≥rico de Pagamentos${NC}"
echo "----------------------------------------"

# 11. Buscar hist√≥rico de pagamentos
make_request "GET" "/payment/history?page=1&limit=10" "" "$STUDENT_TOKEN" "Relat√≥rio de opera√ß√µes financeiras"

# 12. Buscar hist√≥rico filtrado por status
make_request "GET" "/payment/history?status=succeeded&page=1&limit=5" "" "$STUDENT_TOKEN" "Filtrar opera√ß√µes bem-sucedidas"

echo -e "${BLUE}üîî Fase 5: Configura√ß√µes de Notifica√ß√£o${NC}"
echo "----------------------------------------"

# 13. Buscar configura√ß√µes de notifica√ß√£o
make_request "GET" "/payment/notifications" "" "$STUDENT_TOKEN" "Verificar alertas de comando"

# 14. Atualizar configura√ß√µes de notifica√ß√£o
notification_data='{
    "payment_reminders": true,
    "payment_failures": true,
    "promotional_offers": true
}'
make_request "PUT" "/payment/notifications" "$notification_data" "$STUDENT_TOKEN" "Atualizar alertas de comando"

# 15. Verificar configura√ß√µes atualizadas
make_request "GET" "/payment/notifications" "" "$STUDENT_TOKEN" "Confirmar alertas atualizados"

echo -e "${BLUE}üìã Fase 6: Assinaturas${NC}"
echo "----------------------------------------"

# 16. Buscar assinatura ativa
make_request "GET" "/subscription/manage" "" "$STUDENT_TOKEN" "Verificar opera√ß√£o ativa"

echo -e "${BLUE}üìÑ Fase 7: Faturas e Downloads${NC}"
echo "----------------------------------------"

# 17. Tentar baixar fatura (se existir)
invoices_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/history")
if echo "$invoices_response" | grep -q '"invoice_id"'; then
    INVOICE_ID=$(echo "$invoices_response" | grep -o '"invoice_id":"[^"]*"' | head -1 | cut -d'"' -f4)
    if [ "$INVOICE_ID" != "null" ] && [ -n "$INVOICE_ID" ]; then
        echo -e "${BLUE}üìù ID da fatura capturado: $INVOICE_ID${NC}"
        make_request "GET" "/invoices/$INVOICE_ID/download" "" "$STUDENT_TOKEN" "Download do relat√≥rio"
    else
        echo -e "${YELLOW}üìù Nenhuma fatura dispon√≠vel para download${NC}"
    fi
else
    echo -e "${YELLOW}üìù Nenhuma fatura encontrada no hist√≥rico${NC}"
fi
echo ""

echo -e "${BLUE}üß™ Fase 8: Testes de Valida√ß√£o${NC}"
echo "----------------------------------------"

# 18. Tentar adicionar m√©todo com dados inv√°lidos
invalid_data='{"brand": "visa"}'
make_request "POST" "/payment/methods" "$invalid_data" "$STUDENT_TOKEN" "Teste com dados inv√°lidos"

# 19. Tentar acessar m√©todo inexistente
make_request "GET" "/payment/methods/inexistente" "" "$STUDENT_TOKEN" "Teste m√©todo inexistente"

# 20. Tentar atualizar m√©todo sem autoriza√ß√£o
make_request "GET" "/payment/methods" "" "" "Teste sem autentica√ß√£o"

# 21. Tentar remover m√©todo de pagamento
if [ -n "$PAYMENT_METHOD_ID" ]; then
    make_request "DELETE" "/payment/methods/$PAYMENT_METHOD_ID" "" "$STUDENT_TOKEN" "Remover armamento do arsenal"
fi

echo -e "${BLUE}üìà Fase 9: Estat√≠sticas Finais${NC}"
echo "----------------------------------------"

# 22. Verificar estado final dos m√©todos
make_request "GET" "/payment/methods" "" "$STUDENT_TOKEN" "Arsenal final"

# 23. Verificar estado final do hist√≥rico
make_request "GET" "/payment/history?page=1&limit=3" "" "$STUDENT_TOKEN" "Hist√≥rico final"

echo -e "${BLUE}======================================${NC}"
echo -e "${GREEN}üéØ TESTE COMPLETO FINALIZADO!${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""
echo -e "${GREEN}‚úÖ Todos os endpoints do sistema de pagamentos foram testados${NC}"
echo -e "${GREEN}‚úÖ Sistema integrado e funcional${NC}"
echo -e "${GREEN}‚úÖ API respondendo corretamente${NC}"
echo ""
echo -e "${BLUE}üîß Endpoints testados:${NC}"
echo -e "   ‚Ä¢ GET  /payment/methods (Listar m√©todos)"
echo -e "   ‚Ä¢ POST /payment/methods (Adicionar m√©todo)"
echo -e "   ‚Ä¢ PUT  /payment/methods/:id (Atualizar m√©todo)"
echo -e "   ‚Ä¢ DELETE /payment/methods/:id (Remover m√©todo)"
echo -e "   ‚Ä¢ GET  /payment/history (Hist√≥rico)"
echo -e "   ‚Ä¢ GET  /payment/billing (Endere√ßo)"
echo -e "   ‚Ä¢ PUT  /payment/billing (Configurar endere√ßo)"
echo -e "   ‚Ä¢ GET  /payment/notifications (Alertas)"
echo -e "   ‚Ä¢ PUT  /payment/notifications (Atualizar alertas)"
echo -e "   ‚Ä¢ GET  /subscription/manage (Assinatura)"
echo -e "   ‚Ä¢ GET  /invoices/:id/download (Download)"
echo ""
echo -e "${YELLOW}üí° Para testar no frontend:${NC}"
echo -e "   1. Acesse http://localhost:5173/student/payment"
echo -e "   2. Fa√ßa login como estudante: aluno@example.com / aluno123"
echo -e "   3. Teste todas as funcionalidades da p√°gina"
echo ""
echo -e "${BLUE}üéâ Sistema de Pagamentos 100% Operacional!${NC}"