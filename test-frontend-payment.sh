#!/bin/bash

# Test Frontend Payment Integration
# Verificar se p√°gina de pagamentos est√° funcionando corretamente

set -e

API_BASE="http://localhost:8180/api/v1"
FRONTEND_URL="http://localhost:5173"
STUDENT_EMAIL="aluno@example.com"
STUDENT_PASSWORD="aluno123"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}======================================${NC}"
echo -e "${BLUE}üéØ TESTE FRONTEND - SISTEMA PAGAMENTOS${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""

echo -e "${BLUE}üîê Fase 1: Login e Token${NC}"
echo "----------------------------------------"

# 1. Login Student
echo -e "${YELLOW}üéì Login Estudante${NC}"
student_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"$STUDENT_EMAIL\",\"password\":\"$STUDENT_PASSWORD\"}" \
    "$API_BASE/auth/login")

if echo "$student_response" | grep -q '"success":\s*true'; then
    STUDENT_TOKEN=$(echo "$student_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo -e "${GREEN}‚úÖ Estudante autenticado com sucesso${NC}"
    echo -e "   Token: ${STUDENT_TOKEN:0:50}..."
else
    echo -e "${RED}‚ùå Falha na autentica√ß√£o estudante${NC}"
    exit 1
fi
echo ""

echo -e "${BLUE}üí≥ Fase 2: Dados Iniciais da P√°gina${NC}"
echo "----------------------------------------"

# 2. Verificar m√©todos de pagamento
echo -e "${YELLOW}üì° Carregar arsenal financeiro${NC}"
methods_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/methods")
echo "$methods_response" | jq '.' 2>/dev/null || echo "$methods_response"

if echo "$methods_response" | grep -q '"success":\s*true'; then
    methods_count=$(echo "$methods_response" | grep -o '"id"' | wc -l)
    echo -e "${GREEN}‚úÖ Arsenal carregado: $methods_count armamentos${NC}"
else
    echo -e "${RED}‚ùå Falha ao carregar arsenal${NC}"
fi
echo ""

# 3. Verificar endere√ßo de cobran√ßa
echo -e "${YELLOW}üè† Verificar base de opera√ß√µes${NC}"
billing_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/billing")
echo "$billing_response" | jq '.' 2>/dev/null || echo "$billing_response"

if echo "$billing_response" | grep -q '"success":\s*true'; then
    echo -e "${GREEN}‚úÖ Base de opera√ß√µes carregada${NC}"
else
    echo -e "${RED}‚ùå Falha ao carregar base${NC}"
fi
echo ""

# 4. Verificar hist√≥rico de pagamentos
echo -e "${YELLOW}üìä Carregar relat√≥rio de opera√ß√µes${NC}"
history_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/history?page=1&limit=10")
echo "$history_response" | jq '.' 2>/dev/null || echo "$history_response"

if echo "$history_response" | grep -q '"success":\s*true'; then
    history_count=$(echo "$history_response" | grep -o '"total_items":[0-9]*' | cut -d':' -f2)
    echo -e "${GREEN}‚úÖ Relat√≥rio carregado: $history_count opera√ß√µes${NC}"
else
    echo -e "${RED}‚ùå Falha ao carregar relat√≥rio${NC}"
fi
echo ""

# 5. Verificar configura√ß√µes de notifica√ß√£o
echo -e "${YELLOW}üîî Verificar alertas de comando${NC}"
notifications_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/notifications")
echo "$notifications_response" | jq '.' 2>/dev/null || echo "$notifications_response"

if echo "$notifications_response" | grep -q '"success":\s*true'; then
    echo -e "${GREEN}‚úÖ Alertas carregados${NC}"
else
    echo -e "${RED}‚ùå Falha ao carregar alertas${NC}"
fi
echo ""

# 6. Verificar assinatura
echo -e "${YELLOW}üìã Verificar opera√ß√£o ativa${NC}"
subscription_response=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/subscription/manage")
echo "$subscription_response" | jq '.' 2>/dev/null || echo "$subscription_response"

if echo "$subscription_response" | grep -q '"success":\s*true'; then
    echo -e "${GREEN}‚úÖ Opera√ß√£o ativa encontrada${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma opera√ß√£o ativa (normal)${NC}"
fi
echo ""

echo -e "${BLUE}üé® Fase 3: Simula√ß√£o de A√ß√µes da Interface${NC}"
echo "----------------------------------------"

# 7. Adicionar novo m√©todo de pagamento (simula a√ß√£o do modal)
echo -e "${YELLOW}‚ûï Simular adi√ß√£o de armamento${NC}"
new_method_data='{
    "brand": "mastercard",
    "last4": "1234",
    "expiry_month": 6,
    "expiry_year": 2028,
    "holder_name": "Maria Silva",
    "nickname": "CART√ÉO DE BACKUP T√ÅTICO",
    "is_default": false
}'

add_response=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $STUDENT_TOKEN" \
    -d "$new_method_data" \
    "$API_BASE/payment/methods")

echo "$add_response" | jq '.' 2>/dev/null || echo "$add_response"

if echo "$add_response" | grep -q '"success":\s*true'; then
    NEW_METHOD_ID=$(echo "$add_response" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
    echo -e "${GREEN}‚úÖ Armamento adicionado: $NEW_METHOD_ID${NC}"
else
    echo -e "${RED}‚ùå Falha ao adicionar armamento${NC}"
fi
echo ""

# 8. Atualizar endere√ßo (simula a√ß√£o do modal de endere√ßo)
echo -e "${YELLOW}üè† Simular configura√ß√£o de base${NC}"
billing_data='{
    "name": "Maria Silva",
    "email": "maria@teste.com",
    "line1": "Av. Principal, 456",
    "line2": "Bloco B, Apt 789",
    "city": "Rio de Janeiro",
    "state": "RJ",
    "postal_code": "22000-000",
    "country": "BR"
}'

billing_update=$(curl -s -X PUT \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $STUDENT_TOKEN" \
    -d "$billing_data" \
    "$API_BASE/payment/billing")

echo "$billing_update" | jq '.' 2>/dev/null || echo "$billing_update"

if echo "$billing_update" | grep -q '"success":\s*true'; then
    echo -e "${GREEN}‚úÖ Base de opera√ß√µes configurada${NC}"
else
    echo -e "${RED}‚ùå Falha ao configurar base${NC}"
fi
echo ""

# 9. Atualizar configura√ß√µes de notifica√ß√£o (simula toggles)
echo -e "${YELLOW}üîî Simular atualiza√ß√£o de alertas${NC}"
notification_data='{
    "payment_reminders": false,
    "payment_failures": true,
    "promotional_offers": true
}'

notification_update=$(curl -s -X PUT \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $STUDENT_TOKEN" \
    -d "$notification_data" \
    "$API_BASE/payment/notifications")

echo "$notification_update" | jq '.' 2>/dev/null || echo "$notification_update"

if echo "$notification_update" | grep -q '"success":\s*true'; then
    echo -e "${GREEN}‚úÖ Alertas atualizados${NC}"
else
    echo -e "${RED}‚ùå Falha ao atualizar alertas${NC}"
fi
echo ""

# 10. Definir m√©todo como padr√£o (simula bot√£o de estrela)
if [ -n "$NEW_METHOD_ID" ]; then
    echo -e "${YELLOW}‚≠ê Simular definir armamento principal${NC}"
    default_update=$(curl -s -X PUT \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $STUDENT_TOKEN" \
        -d '{"is_default": true}' \
        "$API_BASE/payment/methods/$NEW_METHOD_ID")

    echo "$default_update" | jq '.' 2>/dev/null || echo "$default_update"

    if echo "$default_update" | grep -q '"success":\s*true'; then
        echo -e "${GREEN}‚úÖ Armamento principal definido${NC}"
    else
        echo -e "${RED}‚ùå Falha ao definir principal${NC}"
    fi
    echo ""
fi

echo -e "${BLUE}üìä Fase 4: Estado Final dos Dados${NC}"
echo "----------------------------------------"

# 11. Verificar estado final
echo -e "${YELLOW}üìã Estado final do arsenal${NC}"
final_methods=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/methods")
final_count=$(echo "$final_methods" | grep -o '"id"' | wc -l)
echo -e "${GREEN}Arsenal final: $final_count armamentos${NC}"

echo -e "${YELLOW}üè† Estado final da base${NC}"
final_billing=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/billing")
if echo "$final_billing" | grep -q '"name"'; then
    billing_name=$(echo "$final_billing" | grep -o '"name":"[^"]*"' | cut -d'"' -f4)
    echo -e "${GREEN}Base configurada para: $billing_name${NC}"
fi

echo -e "${YELLOW}üîî Estado final dos alertas${NC}"
final_notifications=$(curl -s -H "Authorization: Bearer $STUDENT_TOKEN" "$API_BASE/payment/notifications")
if echo "$final_notifications" | grep -q '"promotional_offers"'; then
    promo_status=$(echo "$final_notifications" | grep -o '"promotional_offers":[a-z]*' | cut -d':' -f2)
    echo -e "${GREEN}Promo√ß√µes: $promo_status${NC}"
fi
echo ""

echo -e "${BLUE}üßπ Fase 5: Limpeza (Opcional)${NC}"
echo "----------------------------------------"

# 12. Remover m√©todo criado para teste (opcional)
if [ -n "$NEW_METHOD_ID" ]; then
    echo -e "${YELLOW}üóëÔ∏è  Remover armamento de teste${NC}"
    delete_response=$(curl -s -X DELETE \
        -H "Authorization: Bearer $STUDENT_TOKEN" \
        "$API_BASE/payment/methods/$NEW_METHOD_ID")

    if echo "$delete_response" | grep -q '"success":\s*true'; then
        echo -e "${GREEN}‚úÖ Armamento removido${NC}"
    else
        echo -e "${RED}‚ùå Falha ao remover armamento${NC}"
    fi
fi
echo ""

echo -e "${BLUE}======================================${NC}"
echo -e "${GREEN}üéØ TESTE FRONTEND CONCLU√çDO!${NC}"
echo -e "${BLUE}======================================${NC}"
echo ""
echo -e "${GREEN}‚úÖ Todos os dados necess√°rios para o frontend est√£o funcionando${NC}"
echo -e "${GREEN}‚úÖ APIs respondendo corretamente${NC}"
echo -e "${GREEN}‚úÖ Sistema pronto para uso na interface${NC}"
echo ""
echo -e "${BLUE}üåê Para acessar a p√°gina no navegador:${NC}"
echo -e "   1. Abra: ${FRONTEND_URL}/payment"
echo -e "   2. Fa√ßa login: $STUDENT_EMAIL / $STUDENT_PASSWORD"  
echo -e "   3. Teste todas as funcionalidades"
echo ""
echo -e "${YELLOW}üí° Funcionalidades testadas que devem funcionar na UI:${NC}"
echo -e "   ‚Ä¢ ‚úÖ Carregamento inicial dos dados"
echo -e "   ‚Ä¢ ‚úÖ Modal de adicionar cart√£o"
echo -e "   ‚Ä¢ ‚úÖ Modal de configurar endere√ßo"
echo -e "   ‚Ä¢ ‚úÖ Toggles de notifica√ß√£o"
echo -e "   ‚Ä¢ ‚úÖ Definir cart√£o padr√£o"
echo -e "   ‚Ä¢ ‚úÖ Remover cart√£o"
echo -e "   ‚Ä¢ ‚úÖ Hist√≥rico de pagamentos"
echo -e "   ‚Ä¢ ‚úÖ Informa√ß√µes da assinatura"
echo ""
echo -e "${BLUE}üéâ Sistema de Pagamentos Frontend PRONTO!${NC}"