#!/bin/bash

# ========================================
# TESTE COMPLETO DE TODAS AS APIs
# ========================================
# Este script testa todos os endpoints do backend Node.js
# Inclui autentica√ß√£o, CRUD operations e funcionalidades espec√≠ficas

# Configura√ß√µes
API_URL="http://localhost:8181"
SUCCESS_COUNT=0
ERROR_COUNT=0
TOTAL_COUNT=0
TOKEN=""
ADMIN_TOKEN=""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}üî• TESTE COMPLETO - TODAS AS APIs BACKEND${NC}"
echo -e "${CYAN}==========================================${NC}"
echo -e "${BLUE}API URL: ${API_URL}${NC}"
echo -e "${BLUE}Testando todos os endpoints do backend Node.js...${NC}"
echo ""

# Fun√ß√£o para testar uma API
test_api() {
    local method="$1"
    local endpoint="$2"
    local description="$3"
    local auth_required="$4"
    local data="$5"
    local expected_status="$6"
    
    TOTAL_COUNT=$((TOTAL_COUNT + 1))
    
    echo -n "[$TOTAL_COUNT] $method $endpoint - $description..."
    
    # Preparar headers
    local headers=""
    if [ "$auth_required" = "true" ]; then
        if [ -n "$TOKEN" ]; then
            headers="-H \"Authorization: Bearer $TOKEN\""
        else
            echo -e " ${YELLOW}‚ö†Ô∏è  SEM TOKEN (esperado)${NC}"
            return
        fi
    elif [ "$auth_required" = "admin" ]; then
        if [ -n "$ADMIN_TOKEN" ]; then
            headers="-H \"Authorization: Bearer $ADMIN_TOKEN\""
        else
            echo -e " ${YELLOW}‚ö†Ô∏è  SEM TOKEN ADMIN (esperado)${NC}"
            return
        fi
    fi
    
    # Preparar dados
    local data_param=""
    if [ -n "$data" ]; then
        data_param="-d '$data' -H 'Content-Type: application/json'"
    fi
    
    # Fazer requisi√ß√£o
    local cmd="curl -s -o /dev/null -w \"%{http_code}\" -X $method $headers $data_param \"$API_URL$endpoint\""
    local response=$(eval $cmd 2>/dev/null)
    
    # Verificar resultado
    local expected="${expected_status:-200}"
    if [ "$response" = "$expected" ] || [ "$response" = "201" ] || [ "$response" = "204" ]; then
        echo -e " ${GREEN}‚úì OK (HTTP $response)${NC}"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    elif [ "$response" = "401" ] || [ "$response" = "403" ]; then
        if [ "$auth_required" != "false" ]; then
            echo -e " ${YELLOW}‚ö†Ô∏è  AUTH (HTTP $response)${NC}"
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        else
            echo -e " ${RED}‚úó ERRO (HTTP $response)${NC}"
            ERROR_COUNT=$((ERROR_COUNT + 1))
        fi
    else
        echo -e " ${RED}‚úó ERRO (HTTP $response)${NC}"
        ERROR_COUNT=$((ERROR_COUNT + 1))
    fi
}

# Fun√ß√£o para fazer login e obter token
login_user() {
    local email="$1"
    local password="$2"
    local role="$3"
    
    echo -e "${YELLOW}üîê Fazendo login como $role...${NC}"
    
    local response=$(curl -s -X POST "$API_URL/api/v1/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$email\",\"password\":\"$password\"}")
    
    local token=$(echo "$response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    
    if [ -n "$token" ] && [ "$token" != "null" ]; then
        echo -e "${GREEN}‚úì Login realizado com sucesso${NC}"
        if [ "$role" = "admin" ]; then
            ADMIN_TOKEN="$token"
        else
            TOKEN="$token"
        fi
    else
        echo -e "${RED}‚úó Falha no login${NC}"
    fi
    echo ""
}

# ========================================
# TESTE 1: ENDPOINT RAIZ
# ========================================
echo -e "${YELLOW}üè† ENDPOINT RAIZ${NC}"
test_api "GET" "/" "Informa√ß√µes do servi√ßo" "false" "" "200"
echo ""

# ========================================
# TESTE 2: HEALTH CHECK
# ========================================
echo -e "${YELLOW}üíä HEALTH CHECK${NC}"
test_api "GET" "/api/v1/health" "Status do sistema" "false" "" "200"
echo ""

# ========================================
# TESTE 3: AUTENTICA√á√ÉO
# ========================================
echo -e "${YELLOW}üîê AUTENTICA√á√ÉO${NC}"
test_api "POST" "/api/v1/auth/login" "Login (sem dados)" "false" "" "400"
test_api "POST" "/api/v1/auth/login" "Login (dados inv√°lidos)" "false" '{"email":"invalid","password":"wrong"}' "401"

# Fazer login real para obter tokens
login_user "aluno@example.com" "aluno123" "student"
login_user "admin@studypro.com" "Admin@123" "admin"

test_api "GET" "/api/v1/auth/verify" "Verificar token estudante" "true" "" "200"
test_api "POST" "/api/v1/auth/logout" "Logout" "false" "" "200"
echo ""

# ========================================
# TESTE 4: DASHBOARD
# ========================================
echo -e "${YELLOW}üìä DASHBOARD${NC}"
test_api "GET" "/api/v1/dashboard/stats" "Estat√≠sticas admin" "admin" "" "200"
test_api "GET" "/api/v1/dashboard/activities" "Atividades admin" "admin" "" "200"
test_api "GET" "/api/v1/dashboard/performance" "Performance admin" "admin" "" "200"
test_api "GET" "/api/v1/dashboard/student" "Dashboard estudante" "true" "" "200"
echo ""

# ========================================
# TESTE 5: USU√ÅRIOS
# ========================================
echo -e "${YELLOW}üë• USU√ÅRIOS${NC}"
test_api "GET" "/api/v1/users" "Listar usu√°rios" "admin" "" "200"
test_api "POST" "/api/v1/users" "Criar usu√°rio (sem dados)" "admin" "" "400"
test_api "GET" "/api/v1/users/999" "Usu√°rio inexistente" "admin" "" "404"
echo ""

# ========================================
# TESTE 6: CURSOS
# ========================================
echo -e "${YELLOW}üìö CURSOS${NC}"
test_api "GET" "/api/v1/courses" "Listar cursos" "false" "" "200"
test_api "POST" "/api/v1/courses" "Criar curso (sem auth)" "false" "" "401"
test_api "GET" "/api/v1/courses/999" "Curso inexistente" "false" "" "404"
test_api "GET" "/api/v1/courses/enrollments/my-courses" "Meus cursos" "true" "" "200"
echo ""

# ========================================
# TESTE 7: QUEST√ïES
# ========================================
echo -e "${YELLOW}‚ùì QUEST√ïES${NC}"
test_api "GET" "/api/v1/questions" "Listar quest√µes" "true" "" "200"
test_api "GET" "/api/v1/questions/filters" "Filtros de quest√µes" "true" "" "200"
test_api "GET" "/api/v1/questions/stats" "Estat√≠sticas quest√µes" "true" "" "200"
test_api "POST" "/api/v1/questions" "Criar quest√£o (sem auth admin)" "true" "" "403"
echo ""

# ========================================
# TESTE 8: FLASHCARDS
# ========================================
echo -e "${YELLOW}üÉè FLASHCARDS${NC}"
test_api "GET" "/api/v1/flashcards" "Listar flashcards" "true" "" "200"
test_api "GET" "/api/v1/flashcards/stats" "Estat√≠sticas flashcards" "true" "" "200"
test_api "GET" "/api/v1/flashcards/filters" "Filtros flashcards" "true" "" "200"
test_api "POST" "/api/v1/flashcards" "Criar flashcard (sem auth admin)" "true" "" "403"
echo ""

# ========================================
# TESTE 9: SIMULADOS
# ========================================
echo -e "${YELLOW}üéØ SIMULADOS${NC}"
test_api "GET" "/api/v1/mockexams" "Listar simulados" "true" "" "200"
test_api "GET" "/api/v1/mockexams/available" "Simulados dispon√≠veis" "true" "" "200"
test_api "GET" "/api/v1/mockexams/stats" "Estat√≠sticas simulados" "admin" "" "200"
echo ""

# ========================================
# TESTE 10: PROVAS ANTERIORES
# ========================================
echo -e "${YELLOW}üìã PROVAS ANTERIORES${NC}"
test_api "GET" "/api/v1/previousexams" "Listar provas anteriores" "true" "" "200"
test_api "GET" "/api/v1/previousexams/available" "Provas dispon√≠veis" "true" "" "200"
test_api "GET" "/api/v1/previousexams/stats" "Estat√≠sticas provas" "admin" "" "200"
echo ""

# ========================================
# TESTE 11: RESUMOS
# ========================================
echo -e "${YELLOW}üìÑ RESUMOS${NC}"
test_api "GET" "/api/v1/summaries" "Listar resumos" "true" "" "200"
test_api "GET" "/api/v1/summaries/search" "Buscar resumos" "true" "" "200"
test_api "GET" "/api/v1/summaries/subjects" "Mat√©rias resumos" "true" "" "200"
echo ""

# ========================================
# TESTE 12: LEGISLA√á√ÉO
# ========================================
echo -e "${YELLOW}‚öñÔ∏è  LEGISLA√á√ÉO${NC}"
test_api "GET" "/api/v1/legislation" "Listar legisla√ß√£o" "true" "" "200"
test_api "GET" "/api/v1/legislation/search" "Buscar legisla√ß√£o" "true" "" "200"
test_api "GET" "/api/v1/legislation/categories" "Categorias legisla√ß√£o" "true" "" "200"
echo ""

# ========================================
# TESTE 13: SESS√ïES DE EXAME
# ========================================
echo -e "${YELLOW}üìù SESS√ïES DE EXAME${NC}"
test_api "GET" "/api/v1/exam-sessions/sessions" "Minhas sess√µes" "true" "" "200"
test_api "POST" "/api/v1/exams/mock/me1/sessions" "Iniciar sess√£o" "true" "" "201"
echo ""

# ========================================
# TESTE 14: CRONOGRAMA
# ========================================
echo -e "${YELLOW}üìÖ CRONOGRAMA${NC}"
test_api "GET" "/api/v1/schedule/tasks" "Listar tarefas" "true" "" "200"
test_api "GET" "/api/v1/schedule/events" "Eventos calend√°rio" "true" "" "200"
test_api "GET" "/api/v1/schedule/study-sessions" "Sess√µes estudo" "true" "" "200"
test_api "GET" "/api/v1/schedule/stats" "Estat√≠sticas cronograma" "true" "" "200"
echo ""

# ========================================
# TESTE 15: CONFIGURA√á√ïES
# ========================================
echo -e "${YELLOW}‚öôÔ∏è  CONFIGURA√á√ïES${NC}"
test_api "GET" "/api/v1/settings/user" "Configura√ß√µes usu√°rio" "true" "" "200"
test_api "PUT" "/api/v1/settings/user" "Salvar configura√ß√µes (sem dados)" "true" "" "400"
test_api "PUT" "/api/v1/settings/notifications" "Configura√ß√µes notifica√ß√£o" "true" '{"study-reminders":{"enabled":true}}' "200"
echo ""

# ========================================
# TESTE 16: PAGAMENTOS
# ========================================
echo -e "${YELLOW}üí≥ PAGAMENTOS${NC}"
test_api "GET" "/api/v1/payment/methods" "M√©todos pagamento" "true" "" "200"
test_api "GET" "/api/v1/payment/history" "Hist√≥rico pagamentos" "true" "" "200"
test_api "GET" "/api/v1/payment/billing" "Endere√ßo cobran√ßa" "true" "" "200"
test_api "GET" "/api/v1/subscription/manage" "Gerenciar assinatura" "true" "" "200"
echo ""

# ========================================
# TESTE 17: CATEGORIAS
# ========================================
echo -e "${YELLOW}üè∑Ô∏è  CATEGORIAS${NC}"
test_api "GET" "/api/v1/categories" "Listar categorias" "true" "" "200"
test_api "POST" "/api/v1/categories" "Criar categoria (sem auth admin)" "true" "" "403"
echo ""

# ========================================
# TESTE 18: ENDPOINTS INV√ÅLIDOS
# ========================================
echo -e "${YELLOW}‚ùå ENDPOINTS INV√ÅLIDOS${NC}"
test_api "GET" "/api/v1/invalid" "Endpoint inexistente" "false" "" "404"
test_api "POST" "/api/v1/auth/invalid" "Auth endpoint inv√°lido" "false" "" "404"
test_api "GET" "/api/v2/anything" "Vers√£o API inv√°lida" "false" "" "404"
echo ""

# ========================================
# RESUMO DOS RESULTADOS
# ========================================
echo -e "${CYAN}========================================${NC}"
echo -e "${CYAN}üìä RESUMO DOS TESTES${NC}"
echo -e "${CYAN}========================================${NC}"
echo -e "${GREEN}‚úÖ Sucessos: $SUCCESS_COUNT${NC}"
echo -e "${RED}‚ùå Erros: $ERROR_COUNT${NC}"
echo -e "${BLUE}üìã Total: $TOTAL_COUNT${NC}"

# C√°lculo da porcentagem de sucesso
if [ $TOTAL_COUNT -gt 0 ]; then
    SUCCESS_PERCENTAGE=$((SUCCESS_COUNT * 100 / TOTAL_COUNT))
    echo -e "${PURPLE}üìà Taxa de sucesso: ${SUCCESS_PERCENTAGE}%${NC}"
fi

echo ""

# ========================================
# CATEGORIZA√á√ÉO DOS RESULTADOS
# ========================================
echo -e "${YELLOW}üìã CATEGORIAS TESTADAS:${NC}"
echo "‚Ä¢ üè† Endpoint raiz e health check"
echo "‚Ä¢ üîê Autentica√ß√£o e autoriza√ß√£o"
echo "‚Ä¢ üìä Dashboard e estat√≠sticas"
echo "‚Ä¢ üë• Gest√£o de usu√°rios"
echo "‚Ä¢ üìö Sistema de cursos e matr√≠culas"
echo "‚Ä¢ ‚ùì Banco de quest√µes"
echo "‚Ä¢ üÉè Sistema de flashcards"
echo "‚Ä¢ üéØ Simulados e provas anteriores"
echo "‚Ä¢ üìÑ Resumos e legisla√ß√£o"
echo "‚Ä¢ üìù Sess√µes de exame"
echo "‚Ä¢ üìÖ Cronograma e tarefas"
echo "‚Ä¢ ‚öôÔ∏è  Configura√ß√µes de usu√°rio"
echo "‚Ä¢ üí≥ Sistema de pagamentos"
echo "‚Ä¢ üè∑Ô∏è  Categorias e organiza√ß√£o"
echo ""

# ========================================
# NOTAS T√âCNICAS
# ========================================
echo -e "${YELLOW}üîß NOTAS T√âCNICAS:${NC}"
echo "‚Ä¢ Backend Node.js roda em http://localhost:8181"
echo "‚Ä¢ Frontend React roda em http://localhost:5273"
echo "‚Ä¢ Autentica√ß√£o via JWT Bearer token"
echo "‚Ä¢ APIs seguem padr√£o REST com JSON"
echo "‚Ä¢ C√≥digos HTTP apropriados para cada opera√ß√£o"
echo "‚Ä¢ Middleware de autentica√ß√£o funcional"
echo "‚Ä¢ CORS configurado para development"
echo ""

# ========================================
# COMANDOS √öTEIS
# ========================================
echo -e "${YELLOW}üìã COMANDOS √öTEIS:${NC}"
echo "‚Ä¢ Iniciar backend: cd backend-node && npm run dev"
echo "‚Ä¢ Ver logs: docker logs <container>"
echo "‚Ä¢ Testar endpoint espec√≠fico: curl -X GET $API_URL/api/v1/health"
echo "‚Ä¢ Login manual: curl -X POST $API_URL/api/v1/auth/login -d '{\"email\":\"aluno@example.com\",\"password\":\"aluno123\"}'"
echo ""

# Status final
if [ $ERROR_COUNT -eq 0 ]; then
    echo -e "${GREEN}üéâ TODOS OS TESTES DE API PASSARAM!${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  ALGUNS TESTES DE API FALHARAM!${NC}"
    exit 1
fi